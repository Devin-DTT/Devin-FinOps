From 14fa32fb0231a009c1abb4e91a954ecbd5414f20 Mon Sep 17 00:00:00 2001
From: Devin AI <158243242+devin-ai-integration[bot]@users.noreply.github.com>
Date: Tue, 21 Oct 2025 15:08:01 +0000
Subject: [PATCH] Phase 2: Core Metrics Calculation Module

- Created metrics_calculator.py with 20 foundational metrics
- Added config.py for configurable cost rates injection
- Implemented comprehensive unit tests (17 test cases)
- All tests passing successfully
- Module processes existing raw_usage_data.json from Phase 1
- Calculates metrics: costs, ACUs, sessions, efficiency ratios
- Supports department and task type breakdowns

Co-Authored-By: gtorreshuamantica@deloitte.es <gtorreshuamantica@deloitte.es>
---
 README_metrics_calculator.md | 159 +++++++++++++++
 config.py                    |  37 ++++
 metrics_calculator.py        | 385 +++++++++++++++++++++++++++++++++++
 test_metrics_calculator.py   | 258 +++++++++++++++++++++++
 4 files changed, 839 insertions(+)
 create mode 100644 README_metrics_calculator.md
 create mode 100644 config.py
 create mode 100644 metrics_calculator.py
 create mode 100644 test_metrics_calculator.py

diff --git a/README_metrics_calculator.md b/README_metrics_calculator.md
new file mode 100644
index 0000000..d778809
--- /dev/null
+++ b/README_metrics_calculator.md
@@ -0,0 +1,159 @@
+# Devin Metrics Calculator - Phase 2
+
+A modular Python module for calculating foundational metrics from Devin usage data.
+
+## Overview
+
+This module processes raw usage data and calculates 20 foundational metrics for Devin usage analysis, including cost analysis, resource utilization, and efficiency metrics.
+
+## Features
+
+- **Modular Design**: Clean separation of concerns with dedicated modules
+- **Configurable Cost Rates**: Inject custom cost rates via configuration
+- **Comprehensive Metrics**: Calculates 20 foundational metrics
+- **Well-Tested**: Includes comprehensive unit tests
+- **Type-Safe**: Uses type hints for better code quality
+
+## Project Structure
+
+```
+devin-metrics-calculator/
+├── config.py                  # Configuration module for cost rates
+├── metrics_calculator.py      # Main calculator module
+├── test_metrics_calculator.py # Comprehensive unit tests
+├── raw_usage_data.json       # Sample usage data
+├── README.md                 # This file
+└── requirements.txt          # Python dependencies
+```
+
+## Installation
+
+No external dependencies required - uses only Python standard library.
+
+```bash
+# Clone or download this repository
+cd devin-metrics-calculator
+
+# Run tests
+python -m unittest test_metrics_calculator.py
+```
+
+## Usage
+
+### Basic Usage
+
+```python
+from metrics_calculator import MetricsCalculator
+from config import MetricsConfig
+
+# Create configuration with custom cost rates
+config = MetricsConfig(price_per_acu=0.05, currency='USD')
+
+# Initialize calculator
+calculator = MetricsCalculator(config)
+
+# Load data
+calculator.load_data('raw_usage_data.json')
+
+# Calculate all metrics
+all_metrics = calculator.calculate_all_metrics()
+
+# Or calculate individual metrics
+total_cost = calculator.calculate_total_monthly_cost()
+total_acus = calculator.calculate_total_acus()
+```
+
+### Custom Configuration
+
+```python
+# Custom configuration with different cost rates
+custom_config = MetricsConfig(
+    price_per_acu=0.08,
+    currency='EUR',
+    working_hours_per_day=8,
+    working_days_per_month=22
+)
+
+calculator = MetricsCalculator(custom_config)
+```
+
+## 20 Foundational Metrics
+
+1. **Total Monthly Cost** - Total cost for the reporting period
+2. **Total ACUs** - Total ACUs consumed across all sessions
+3. **Cost Per User** - Cost breakdown by user
+4. **ACUs Per Session** - ACUs consumed in each session
+5. **Average ACUs Per Session** - Mean ACUs per session
+6. **Total Sessions** - Total number of sessions
+7. **Sessions Per User** - Session count by user
+8. **Total Duration Minutes** - Total duration of all sessions
+9. **Average Session Duration** - Mean session duration
+10. **ACUs Per Minute** - Resource consumption rate
+11. **Cost Per Minute** - Cost rate per minute
+12. **Unique Users** - Number of unique users
+13. **Sessions By Task Type** - Session distribution by task type
+14. **ACUs By Task Type** - Resource consumption by task type
+15. **Cost By Task Type** - Cost breakdown by task type
+16. **Sessions By Department** - Session distribution by department
+17. **ACUs By Department** - Resource consumption by department
+18. **Cost By Department** - Cost breakdown by department
+19. **Average Cost Per User** - Mean cost per user
+20. **Efficiency Ratio** - ACUs consumed per hour
+
+## Running Tests
+
+```bash
+# Run all tests
+python -m unittest test_metrics_calculator.py
+
+# Run with verbose output
+python -m unittest test_metrics_calculator.py -v
+
+# Run specific test
+python -m unittest test_metrics_calculator.TestMetricsCalculator.test_calculate_total_monthly_cost
+```
+
+## Configuration Options
+
+The `MetricsConfig` class accepts the following parameters:
+
+- `price_per_acu` (float): Cost per ACU (default: 0.05)
+- `currency` (str): Currency code (default: 'USD')
+- `working_hours_per_day` (int): Standard working hours (default: 8)
+- `working_days_per_month` (int): Standard working days (default: 22)
+
+## Data Format
+
+The module expects a JSON file with the following structure:
+
+```json
+{
+  "organization": "Organization Name",
+  "reporting_period": {
+    "start_date": "YYYY-MM-DD",
+    "end_date": "YYYY-MM-DD",
+    "month": "Month Year"
+  },
+  "sessions": [
+    {
+      "session_id": "string",
+      "user_email": "string",
+      "duration_minutes": number,
+      "acus_consumed": number,
+      "task_type": "string",
+      "status": "string"
+    }
+  ],
+  "user_details": [
+    {
+      "user_email": "string",
+      "department": "string",
+      "role": "string"
+    }
+  ]
+}
+```
+
+## License
+
+This is a Phase 2 deliverable for the Devin usage metrics project.
diff --git a/config.py b/config.py
new file mode 100644
index 0000000..df194bd
--- /dev/null
+++ b/config.py
@@ -0,0 +1,37 @@
+"""
+Configuration module for metrics calculation.
+Allows injection of custom cost rates and other configurable parameters.
+"""
+
+class MetricsConfig:
+    """Configuration class for metrics calculation parameters."""
+    
+    def __init__(
+        self,
+        price_per_acu: float = 0.05,
+        currency: str = "USD",
+        working_hours_per_day: int = 8,
+        working_days_per_month: int = 22
+    ):
+        """
+        Initialize metrics configuration.
+        
+        Args:
+            price_per_acu: Cost per ACU in the specified currency
+            currency: Currency code (e.g., 'USD', 'EUR')
+            working_hours_per_day: Standard working hours per day
+            working_days_per_month: Standard working days per month
+        """
+        self.price_per_acu = price_per_acu
+        self.currency = currency
+        self.working_hours_per_day = working_hours_per_day
+        self.working_days_per_month = working_days_per_month
+    
+    def to_dict(self):
+        """Convert configuration to dictionary."""
+        return {
+            'price_per_acu': self.price_per_acu,
+            'currency': self.currency,
+            'working_hours_per_day': self.working_hours_per_day,
+            'working_days_per_month': self.working_days_per_month
+        }
diff --git a/metrics_calculator.py b/metrics_calculator.py
new file mode 100644
index 0000000..696cfef
--- /dev/null
+++ b/metrics_calculator.py
@@ -0,0 +1,385 @@
+"""
+Metrics Calculator Module for Devin Usage Data Analysis.
+This module processes raw usage data and calculates 20 foundational metrics.
+"""
+
+import json
+from typing import Dict, List, Any
+from collections import defaultdict
+from config import MetricsConfig
+
+
+class MetricsCalculator:
+    """
+    Main class for calculating usage metrics from Devin session data.
+    Supports configurable cost rates and parameters.
+    """
+    
+    def __init__(self, config: MetricsConfig = None):
+        """
+        Initialize the metrics calculator.
+        
+        Args:
+            config: MetricsConfig object with cost rates and parameters.
+                   If None, uses default configuration.
+        """
+        self.config = config or MetricsConfig()
+        self.data = None
+        self.sessions = []
+        self.users = []
+    
+    def load_data(self, json_file_path: str) -> None:
+        """
+        Load usage data from JSON file.
+        
+        Args:
+            json_file_path: Path to the raw_usage_data.json file
+        
+        Raises:
+            FileNotFoundError: If the file doesn't exist
+            json.JSONDecodeError: If the file is not valid JSON
+        """
+        with open(json_file_path, 'r') as f:
+            self.data = json.load(f)
+        
+        self.sessions = self.data.get('sessions', [])
+        self.users = self.data.get('user_details', [])
+    
+    def calculate_total_monthly_cost(self) -> float:
+        """
+        Calculate total monthly cost.
+        Metric 1: Coste total mensual
+        
+        Returns:
+            Total cost for the month in configured currency
+        """
+        total_acus = sum(session.get('acus_consumed', 0) for session in self.sessions)
+        return total_acus * self.config.price_per_acu
+    
+    def calculate_total_acus(self) -> int:
+        """
+        Calculate total ACUs consumed.
+        Metric 2: ACUs totales
+        
+        Returns:
+            Total ACUs consumed across all sessions
+        """
+        return sum(session.get('acus_consumed', 0) for session in self.sessions)
+    
+    def calculate_cost_per_user(self) -> Dict[str, float]:
+        """
+        Calculate cost per user.
+        Metric 3: Coste por usuario
+        
+        Returns:
+            Dictionary mapping user email to their total cost
+        """
+        user_acus = defaultdict(int)
+        
+        for session in self.sessions:
+            user_email = session.get('user_email')
+            acus = session.get('acus_consumed', 0)
+            user_acus[user_email] += acus
+        
+        return {
+            user: acus * self.config.price_per_acu 
+            for user, acus in user_acus.items()
+        }
+    
+    def calculate_acus_per_session(self) -> Dict[str, int]:
+        """
+        Calculate ACUs consumed per session.
+        Metric 4: ACUs por sesión
+        
+        Returns:
+            Dictionary mapping session ID to ACUs consumed
+        """
+        return {
+            session.get('session_id'): session.get('acus_consumed', 0)
+            for session in self.sessions
+        }
+    
+    def calculate_average_acus_per_session(self) -> float:
+        """
+        Calculate average ACUs per session.
+        Metric 5: Promedio de ACUs por sesión
+        
+        Returns:
+            Average ACUs consumed per session
+        """
+        if not self.sessions:
+            return 0.0
+        
+        total_acus = self.calculate_total_acus()
+        return total_acus / len(self.sessions)
+    
+    def calculate_total_sessions(self) -> int:
+        """
+        Calculate total number of sessions.
+        Metric 6: Total de sesiones
+        
+        Returns:
+            Total number of sessions
+        """
+        return len(self.sessions)
+    
+    def calculate_sessions_per_user(self) -> Dict[str, int]:
+        """
+        Calculate number of sessions per user.
+        Metric 7: Sesiones por usuario
+        
+        Returns:
+            Dictionary mapping user email to session count
+        """
+        user_sessions = defaultdict(int)
+        
+        for session in self.sessions:
+            user_email = session.get('user_email')
+            user_sessions[user_email] += 1
+        
+        return dict(user_sessions)
+    
+    def calculate_total_duration_minutes(self) -> int:
+        """
+        Calculate total duration in minutes.
+        Metric 8: Duración total (minutos)
+        
+        Returns:
+            Total duration of all sessions in minutes
+        """
+        return sum(session.get('duration_minutes', 0) for session in self.sessions)
+    
+    def calculate_average_session_duration(self) -> float:
+        """
+        Calculate average session duration.
+        Metric 9: Duración promedio por sesión (minutos)
+        
+        Returns:
+            Average duration per session in minutes
+        """
+        if not self.sessions:
+            return 0.0
+        
+        total_duration = self.calculate_total_duration_minutes()
+        return total_duration / len(self.sessions)
+    
+    def calculate_acus_per_minute(self) -> float:
+        """
+        Calculate ACUs consumed per minute.
+        Metric 10: ACUs por minuto
+        
+        Returns:
+            Average ACUs consumed per minute
+        """
+        total_duration = self.calculate_total_duration_minutes()
+        if total_duration == 0:
+            return 0.0
+        
+        total_acus = self.calculate_total_acus()
+        return total_acus / total_duration
+    
+    def calculate_cost_per_minute(self) -> float:
+        """
+        Calculate cost per minute.
+        Metric 11: Coste por minuto
+        
+        Returns:
+            Average cost per minute
+        """
+        acus_per_minute = self.calculate_acus_per_minute()
+        return acus_per_minute * self.config.price_per_acu
+    
+    def calculate_unique_users(self) -> int:
+        """
+        Calculate number of unique users.
+        Metric 12: Usuarios únicos
+        
+        Returns:
+            Number of unique users
+        """
+        unique_emails = set(session.get('user_email') for session in self.sessions)
+        return len(unique_emails)
+    
+    def calculate_sessions_by_task_type(self) -> Dict[str, int]:
+        """
+        Calculate sessions grouped by task type.
+        Metric 13: Sesiones por tipo de tarea
+        
+        Returns:
+            Dictionary mapping task type to session count
+        """
+        task_sessions = defaultdict(int)
+        
+        for session in self.sessions:
+            task_type = session.get('task_type', 'unknown')
+            task_sessions[task_type] += 1
+        
+        return dict(task_sessions)
+    
+    def calculate_acus_by_task_type(self) -> Dict[str, int]:
+        """
+        Calculate ACUs grouped by task type.
+        Metric 14: ACUs por tipo de tarea
+        
+        Returns:
+            Dictionary mapping task type to total ACUs consumed
+        """
+        task_acus = defaultdict(int)
+        
+        for session in self.sessions:
+            task_type = session.get('task_type', 'unknown')
+            acus = session.get('acus_consumed', 0)
+            task_acus[task_type] += acus
+        
+        return dict(task_acus)
+    
+    def calculate_cost_by_task_type(self) -> Dict[str, float]:
+        """
+        Calculate cost grouped by task type.
+        Metric 15: Coste por tipo de tarea
+        
+        Returns:
+            Dictionary mapping task type to total cost
+        """
+        acus_by_task = self.calculate_acus_by_task_type()
+        return {
+            task_type: acus * self.config.price_per_acu
+            for task_type, acus in acus_by_task.items()
+        }
+    
+    def calculate_sessions_by_department(self) -> Dict[str, int]:
+        """
+        Calculate sessions grouped by department.
+        Metric 16: Sesiones por departamento
+        
+        Returns:
+            Dictionary mapping department to session count
+        """
+        user_dept_map = {
+            user.get('user_email'): user.get('department', 'Unknown')
+            for user in self.users
+        }
+        
+        dept_sessions = defaultdict(int)
+        for session in self.sessions:
+            user_email = session.get('user_email')
+            dept = user_dept_map.get(user_email, 'Unknown')
+            dept_sessions[dept] += 1
+        
+        return dict(dept_sessions)
+    
+    def calculate_acus_by_department(self) -> Dict[str, int]:
+        """
+        Calculate ACUs grouped by department.
+        Metric 17: ACUs por departamento
+        
+        Returns:
+            Dictionary mapping department to total ACUs consumed
+        """
+        user_dept_map = {
+            user.get('user_email'): user.get('department', 'Unknown')
+            for user in self.users
+        }
+        
+        dept_acus = defaultdict(int)
+        for session in self.sessions:
+            user_email = session.get('user_email')
+            dept = user_dept_map.get(user_email, 'Unknown')
+            acus = session.get('acus_consumed', 0)
+            dept_acus[dept] += acus
+        
+        return dict(dept_acus)
+    
+    def calculate_cost_by_department(self) -> Dict[str, float]:
+        """
+        Calculate cost grouped by department.
+        Metric 18: Coste por departamento
+        
+        Returns:
+            Dictionary mapping department to total cost
+        """
+        acus_by_dept = self.calculate_acus_by_department()
+        return {
+            dept: acus * self.config.price_per_acu
+            for dept, acus in acus_by_dept.items()
+        }
+    
+    def calculate_average_cost_per_user(self) -> float:
+        """
+        Calculate average cost per user.
+        Metric 19: Coste promedio por usuario
+        
+        Returns:
+            Average cost per user
+        """
+        unique_users = self.calculate_unique_users()
+        if unique_users == 0:
+            return 0.0
+        
+        total_cost = self.calculate_total_monthly_cost()
+        return total_cost / unique_users
+    
+    def calculate_efficiency_ratio(self) -> float:
+        """
+        Calculate efficiency ratio (ACUs per hour).
+        Metric 20: Ratio de eficiencia (ACUs por hora)
+        
+        Returns:
+            Average ACUs consumed per hour
+        """
+        total_duration_hours = self.calculate_total_duration_minutes() / 60
+        if total_duration_hours == 0:
+            return 0.0
+        
+        total_acus = self.calculate_total_acus()
+        return total_acus / total_duration_hours
+    
+    def calculate_all_metrics(self) -> Dict[str, Any]:
+        """
+        Calculate all 20 foundational metrics.
+        
+        Returns:
+            Dictionary containing all calculated metrics
+        """
+        return {
+            'config': self.config.to_dict(),
+            'reporting_period': self.data.get('reporting_period', {}),
+            'metrics': {
+                '01_total_monthly_cost': self.calculate_total_monthly_cost(),
+                '02_total_acus': self.calculate_total_acus(),
+                '03_cost_per_user': self.calculate_cost_per_user(),
+                '04_acus_per_session': self.calculate_acus_per_session(),
+                '05_average_acus_per_session': self.calculate_average_acus_per_session(),
+                '06_total_sessions': self.calculate_total_sessions(),
+                '07_sessions_per_user': self.calculate_sessions_per_user(),
+                '08_total_duration_minutes': self.calculate_total_duration_minutes(),
+                '09_average_session_duration': self.calculate_average_session_duration(),
+                '10_acus_per_minute': self.calculate_acus_per_minute(),
+                '11_cost_per_minute': self.calculate_cost_per_minute(),
+                '12_unique_users': self.calculate_unique_users(),
+                '13_sessions_by_task_type': self.calculate_sessions_by_task_type(),
+                '14_acus_by_task_type': self.calculate_acus_by_task_type(),
+                '15_cost_by_task_type': self.calculate_cost_by_task_type(),
+                '16_sessions_by_department': self.calculate_sessions_by_department(),
+                '17_acus_by_department': self.calculate_acus_by_department(),
+                '18_cost_by_department': self.calculate_cost_by_department(),
+                '19_average_cost_per_user': self.calculate_average_cost_per_user(),
+                '20_efficiency_ratio': self.calculate_efficiency_ratio()
+            }
+        }
+
+
+def main():
+    """Example usage of the MetricsCalculator."""
+    config = MetricsConfig(price_per_acu=0.05, currency='USD')
+    
+    calculator = MetricsCalculator(config)
+    calculator.load_data('raw_usage_data.json')
+    
+    all_metrics = calculator.calculate_all_metrics()
+    
+    print(json.dumps(all_metrics, indent=2, default=str))
+
+
+if __name__ == '__main__':
+    main()
diff --git a/test_metrics_calculator.py b/test_metrics_calculator.py
new file mode 100644
index 0000000..c87a80f
--- /dev/null
+++ b/test_metrics_calculator.py
@@ -0,0 +1,258 @@
+"""
+Comprehensive unit tests for the MetricsCalculator module.
+Tests the main calculation functions to verify accuracy.
+"""
+
+import unittest
+import json
+import os
+from metrics_calculator import MetricsCalculator
+from config import MetricsConfig
+
+
+class TestMetricsCalculator(unittest.TestCase):
+    """Test suite for MetricsCalculator class."""
+    
+    def setUp(self):
+        """Set up test fixtures before each test method."""
+        self.test_data = {
+            "organization": "Test Org",
+            "reporting_period": {
+                "start_date": "2024-09-01",
+                "end_date": "2024-09-30",
+                "month": "September 2024"
+            },
+            "sessions": [
+                {
+                    "session_id": "test_001",
+                    "user_email": "user1@test.com",
+                    "duration_minutes": 60,
+                    "acus_consumed": 300,
+                    "task_type": "feature_development",
+                    "status": "completed"
+                },
+                {
+                    "session_id": "test_002",
+                    "user_email": "user2@test.com",
+                    "duration_minutes": 90,
+                    "acus_consumed": 450,
+                    "task_type": "bug_fix",
+                    "status": "completed"
+                },
+                {
+                    "session_id": "test_003",
+                    "user_email": "user1@test.com",
+                    "duration_minutes": 30,
+                    "acus_consumed": 150,
+                    "task_type": "feature_development",
+                    "status": "completed"
+                }
+            ],
+            "user_details": [
+                {
+                    "user_email": "user1@test.com",
+                    "department": "Engineering",
+                    "role": "Developer"
+                },
+                {
+                    "user_email": "user2@test.com",
+                    "department": "QA",
+                    "role": "QA Engineer"
+                }
+            ]
+        }
+        
+        self.test_file = 'test_data.json'
+        with open(self.test_file, 'w') as f:
+            json.dump(self.test_data, f)
+        
+        self.config = MetricsConfig(price_per_acu=0.10, currency='USD')
+        self.calculator = MetricsCalculator(self.config)
+        self.calculator.load_data(self.test_file)
+    
+    def tearDown(self):
+        """Clean up test fixtures after each test method."""
+        if os.path.exists(self.test_file):
+            os.remove(self.test_file)
+    
+    def test_calculate_total_monthly_cost(self):
+        """Test calculation of total monthly cost."""
+        expected_cost = (300 + 450 + 150) * 0.10
+        actual_cost = self.calculator.calculate_total_monthly_cost()
+        
+        self.assertEqual(actual_cost, expected_cost)
+        self.assertEqual(actual_cost, 90.0)
+    
+    def test_calculate_total_acus(self):
+        """Test calculation of total ACUs consumed."""
+        expected_acus = 300 + 450 + 150
+        actual_acus = self.calculator.calculate_total_acus()
+        
+        self.assertEqual(actual_acus, expected_acus)
+        self.assertEqual(actual_acus, 900)
+    
+    def test_calculate_cost_per_user(self):
+        """Test calculation of cost per user."""
+        cost_per_user = self.calculator.calculate_cost_per_user()
+        
+        self.assertIn('user1@test.com', cost_per_user)
+        self.assertIn('user2@test.com', cost_per_user)
+        
+        self.assertEqual(cost_per_user['user1@test.com'], 45.0)
+        self.assertEqual(cost_per_user['user2@test.com'], 45.0)
+    
+    def test_calculate_average_acus_per_session(self):
+        """Test calculation of average ACUs per session."""
+        expected_avg = 900 / 3
+        actual_avg = self.calculator.calculate_average_acus_per_session()
+        
+        self.assertEqual(actual_avg, expected_avg)
+        self.assertEqual(actual_avg, 300.0)
+    
+    def test_calculate_sessions_per_user(self):
+        """Test calculation of sessions per user."""
+        sessions_per_user = self.calculator.calculate_sessions_per_user()
+        
+        self.assertEqual(sessions_per_user['user1@test.com'], 2)
+        self.assertEqual(sessions_per_user['user2@test.com'], 1)
+    
+    def test_calculate_total_duration_minutes(self):
+        """Test calculation of total duration."""
+        expected_duration = 60 + 90 + 30
+        actual_duration = self.calculator.calculate_total_duration_minutes()
+        
+        self.assertEqual(actual_duration, expected_duration)
+        self.assertEqual(actual_duration, 180)
+    
+    def test_calculate_average_session_duration(self):
+        """Test calculation of average session duration."""
+        expected_avg = 180 / 3
+        actual_avg = self.calculator.calculate_average_session_duration()
+        
+        self.assertEqual(actual_avg, expected_avg)
+        self.assertEqual(actual_avg, 60.0)
+    
+    def test_calculate_acus_per_minute(self):
+        """Test calculation of ACUs per minute."""
+        expected_ratio = 900 / 180
+        actual_ratio = self.calculator.calculate_acus_per_minute()
+        
+        self.assertEqual(actual_ratio, expected_ratio)
+        self.assertEqual(actual_ratio, 5.0)
+    
+    def test_calculate_unique_users(self):
+        """Test calculation of unique users."""
+        unique_users = self.calculator.calculate_unique_users()
+        
+        self.assertEqual(unique_users, 2)
+    
+    def test_calculate_sessions_by_task_type(self):
+        """Test calculation of sessions by task type."""
+        sessions_by_task = self.calculator.calculate_sessions_by_task_type()
+        
+        self.assertEqual(sessions_by_task['feature_development'], 2)
+        self.assertEqual(sessions_by_task['bug_fix'], 1)
+    
+    def test_calculate_acus_by_task_type(self):
+        """Test calculation of ACUs by task type."""
+        acus_by_task = self.calculator.calculate_acus_by_task_type()
+        
+        self.assertEqual(acus_by_task['feature_development'], 450)
+        self.assertEqual(acus_by_task['bug_fix'], 450)
+    
+    def test_calculate_sessions_by_department(self):
+        """Test calculation of sessions by department."""
+        sessions_by_dept = self.calculator.calculate_sessions_by_department()
+        
+        self.assertEqual(sessions_by_dept['Engineering'], 2)
+        self.assertEqual(sessions_by_dept['QA'], 1)
+    
+    def test_calculate_acus_by_department(self):
+        """Test calculation of ACUs by department."""
+        acus_by_dept = self.calculator.calculate_acus_by_department()
+        
+        self.assertEqual(acus_by_dept['Engineering'], 450)
+        self.assertEqual(acus_by_dept['QA'], 450)
+    
+    def test_calculate_efficiency_ratio(self):
+        """Test calculation of efficiency ratio."""
+        expected_ratio = 900 / (180 / 60)
+        actual_ratio = self.calculator.calculate_efficiency_ratio()
+        
+        self.assertEqual(actual_ratio, expected_ratio)
+        self.assertEqual(actual_ratio, 300.0)
+    
+    def test_custom_config_injection(self):
+        """Test that custom configuration is properly injected."""
+        custom_config = MetricsConfig(price_per_acu=0.25, currency='EUR')
+        custom_calculator = MetricsCalculator(custom_config)
+        custom_calculator.load_data(self.test_file)
+        
+        total_cost = custom_calculator.calculate_total_monthly_cost()
+        expected_cost = 900 * 0.25
+        
+        self.assertEqual(total_cost, expected_cost)
+        self.assertEqual(total_cost, 225.0)
+    
+    def test_empty_sessions(self):
+        """Test behavior with empty sessions list."""
+        empty_data = {
+            "sessions": [],
+            "user_details": []
+        }
+        
+        empty_file = 'empty_test.json'
+        with open(empty_file, 'w') as f:
+            json.dump(empty_data, f)
+        
+        try:
+            empty_calculator = MetricsCalculator(self.config)
+            empty_calculator.load_data(empty_file)
+            
+            self.assertEqual(empty_calculator.calculate_total_acus(), 0)
+            self.assertEqual(empty_calculator.calculate_total_sessions(), 0)
+            self.assertEqual(empty_calculator.calculate_unique_users(), 0)
+            self.assertEqual(empty_calculator.calculate_average_acus_per_session(), 0.0)
+        finally:
+            if os.path.exists(empty_file):
+                os.remove(empty_file)
+    
+    def test_calculate_all_metrics(self):
+        """Test that calculate_all_metrics returns all expected metrics."""
+        all_metrics = self.calculator.calculate_all_metrics()
+        
+        self.assertIn('config', all_metrics)
+        self.assertIn('metrics', all_metrics)
+        self.assertIn('reporting_period', all_metrics)
+        
+        metrics = all_metrics['metrics']
+        
+        expected_keys = [
+            '01_total_monthly_cost',
+            '02_total_acus',
+            '03_cost_per_user',
+            '04_acus_per_session',
+            '05_average_acus_per_session',
+            '06_total_sessions',
+            '07_sessions_per_user',
+            '08_total_duration_minutes',
+            '09_average_session_duration',
+            '10_acus_per_minute',
+            '11_cost_per_minute',
+            '12_unique_users',
+            '13_sessions_by_task_type',
+            '14_acus_by_task_type',
+            '15_cost_by_task_type',
+            '16_sessions_by_department',
+            '17_acus_by_department',
+            '18_cost_by_department',
+            '19_average_cost_per_user',
+            '20_efficiency_ratio'
+        ]
+        
+        for key in expected_keys:
+            self.assertIn(key, metrics, f"Missing metric: {key}")
+
+
+if __name__ == '__main__':
+    unittest.main()
-- 
2.34.1

